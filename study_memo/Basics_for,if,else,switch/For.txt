###For
基本的に、 for ループはセミコロン ; で3つの部分に分かれています:

初期化ステートメント: 最初のイテレーション(繰り返し)の前に初期化が実行されます
条件式: イテレーション毎に評価されます
後処理ステートメント: イテレーション毎の最後に実行されます
初期化ステートメントは、短い変数宣言によく利用します。その変数は for ステートメントのスコープ内でのみ有効です。

ループは、条件式の評価が false となった場合にイテレーションを停止します。

Note: 他の言語、C言語 や Java、JavaScriptの for ループとは異なり、 for ステートメントの3つの部分を括る括弧 ( ) はありません。なお、中括弧 { } は常に必要です。


package main

import "fmt"

func main() {
	sum := 0
	for i := 0; i < 10; i++ {
		sum += i
	}
	fmt.Println(sum)
}



###For continued
初期化と後処理ステートメントの記述は任意です。

package main

import "fmt"

func main() {
	sum := 1
	for ; sum < 1000; {
		sum += sum
	}
	fmt.Println(sum)
}




###For is Go's "while"
セミコロン(;)を省略することもできます。つまり、C言語などにある while は、Goでは for だけを使います。

package main

import "fmt"

func main() {
	sum := 1
	for sum < 1000 {
		sum += sum
	}
	fmt.Println(sum)
}




###Forever
ループ条件を省略すれば、無限ループ( infinite loop )になりますので、無限ループをコンパクトに表現できます。

package main

func main() {
	for {
	}
}
